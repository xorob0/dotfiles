# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

path = str(config.configdir)

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Store cookies. Note this option needs a restart with QtWebEngine on Qt
# < 5.9.
# Type: Bool
c.content.cookies.store = True

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'file://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Enable JavaScript.
# Type: Bool
c.content.javascript.enabled = False

# Openning list of domain where javascript is allowed
domainlist = open(path + "/jsAllow.txt", "r")
# Creating a array from the file
domains = domainlist.read().split('\n')
# Deleting last element as it is empty (and thus, allow javascript anywhere)
del domains[-1]

# Enable javascript on the allowed domains
for domain in domains:
    config.set('content.javascript.enabled', True, '*.' + domain)
domainlist.close()


# Mode to use for hints.
# Type: String
# Valid values:
#   - number: Use numeric hints. (In this mode you can also type letters from the hinted element to filter and reduce the number of elements that are hinted.)
#   - letter: Use the characters in the `hints.chars` setting.
#   - word: Use hints words based on the html elements and the extra words.
c.hints.mode = 'number'

# Hide the statusbar unless a message is shown.
# Type: Bool
c.statusbar.hide = False

# Position of the tab bar.
# Type: Position
# Valid values:
#   - top
#   - bottom
#   - left
#   - right
c.tabs.position = 'right'

# When to show the tab bar.
# Type: String
# Valid values:
#   - always: Always show the tab bar.
#   - never: Always hide the tab bar.
#   - multiple: Hide the tab bar if only one tab is open.
#   - switching: Show the tab bar when switching tabs.
c.tabs.show = 'switching'

# Width (in pixels or as percentage of the window) of the tab bar if
# it's vertical.
# Type: PercOrInt
c.tabs.width = '10%'

# Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
# for a blank page.
# Type: FuzzyUrl
c.url.default_page = 'https://qwant.com'

# Search engines which can be used via the address bar. Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` signs. The search engine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict

with open(path + "/searchengines.txt", "r") as f :
    for line in f:
       (alias, url) = line.split()
       c.url.searchengines[str(alias)] = url

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = 'https://qwant.com'

# Load colorscheme
exec(open(str(config.datadir) + '/userscripts/colorscheme.py').read())

# Bindings for normal mode
config.bind(',d', 'spawn youtube-dl -o ~/Videos/%(title)s.%(ext)s {url}')
config.bind(',m', 'spawn umpv {url}')
config.bind(';d', 'hint links spawn youtube-dl -o ~/Videos/%(title)s.%(ext)s {hint-url}')
config.bind(';m', 'hint links spawn umpv {hint-url}')
config.bind('E', 'spawn --userscript qutepass.py -Y')
config.bind('e', 'spawn --userscript qutepass.py --username xorob0')
config.bind('gi', 'spawn --userscript cycle-inputs.js')

def bind_chained(key, *commands):
    config.bind(key, ' ;; '.join(commands))

bind_chained('aa', 'spawn --userscript jsAllow.py -a', 'config-source', 'reload')
bind_chained('au', 'spawn --userscript jsAllow.py -u', 'config-source', 'reload')
